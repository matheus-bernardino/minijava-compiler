Warning : Scanner at 67(13): Unrecognized character '=' -- ignored
Warning : Terminal "LBRACKET" was declared but never used
Warning : Terminal "INT" was declared but never used
Warning : Terminal "STATIC" was declared but never used
Warning : Terminal "AND" was declared but never used
Warning : Terminal "LTHAN" was declared but never used
Warning : Terminal "LCURLYBRACE" was declared but never used
Warning : Terminal "CLASS" was declared but never used
Warning : Terminal "MAIN" was declared but never used
Warning : Terminal "EXCLAMATION" was declared but never used
Warning : Terminal "THIS" was declared but never used
Warning : Terminal "DOT" was declared but never used
Warning : Terminal "BOOLEAN" was declared but never used
Warning : Terminal "RETURN" was declared but never used
Warning : Terminal "RBRACKET" was declared but never used
Warning : Terminal "TRUE" was declared but never used
Warning : Terminal "NEW" was declared but never used
Warning : Terminal "COMA" was declared but never used
Warning : Terminal "VOID" was declared but never used
Warning : Terminal "INTLITERAL" was declared but never used
Warning : Terminal "ELSE" was declared but never used
Warning : Terminal "WHILE" was declared but never used
Warning : Terminal "PUBLIC" was declared but never used
Warning : Terminal "EXTENDS" was declared but never used
Warning : Terminal "STRING" was declared but never used
Warning : Terminal "FALSE" was declared but never used
Warning : Terminal "RCURLYBRACE" was declared but never used
Warning : Terminal "PRINT" was declared but never used
Warning : Terminal "LENGTH" was declared but never used
===== Terminals =====
[0]EOF [1]error [2]DISPLAY [3]PUBLIC [4]STATIC 
[5]VOID [6]MAIN [7]CLASS [8]EXTENDS [9]NEW 
[10]THIS [11]STRING [12]INT [13]BOOLEAN [14]TRUE 
[15]FALSE [16]IF [17]ELSE [18]WHILE [19]RETURN 
[20]LENGTH [21]PRINT [22]LTHAN [23]DOT [24]EXCLAMATION 
[25]AND [26]PLUS [27]BECOMES [28]MINUS [29]MULTI 
[30]LPAREN [31]RPAREN [32]SEMICOLON [33]LBRACKET [34]RBRACKET 
[35]LCURLYBRACE [36]RCURLYBRACE [37]COMA [38]IDENTIFIER [39]INTLITERAL 


===== Non terminals =====
[0]Program [1]Statement [2]AssignStatement [3]DisplayStatement [4]Expression 
[5]Identifier [6]IfStmt 

===== Productions =====
[0] Program ::= Statement 
[1] $START ::= Program EOF 
[2] Program ::= Program Statement 
[3] Statement ::= AssignStatement 
[4] Statement ::= DisplayStatement 
[5] Statement ::= IfStmt 
[6] IfStmt ::= IF LPAREN Expression RPAREN Statement SEMICOLON 
[7] AssignStatement ::= Identifier BECOMES Expression SEMICOLON 
[8] Identifier ::= IDENTIFIER 
[9] DisplayStatement ::= DISPLAY Expression SEMICOLON 
[10] Expression ::= IDENTIFIER 
[11] Expression ::= Expression PLUS Expression 
[12] Expression ::= Expression MINUS Expression 
[13] Expression ::= Expression MULTI Expression 
[14] Expression ::= LPAREN Expression RPAREN 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [Identifier ::= (*) IDENTIFIER , {BECOMES }]
  [Statement ::= (*) IfStmt , {EOF DISPLAY IF IDENTIFIER }]
  [Program ::= (*) Program Statement , {EOF DISPLAY IF IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {EOF DISPLAY IF IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {EOF DISPLAY IF IDENTIFIER }]
  [$START ::= (*) Program EOF , {EOF }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {EOF DISPLAY IF IDENTIFIER }]
  [IfStmt ::= (*) IF LPAREN Expression RPAREN Statement SEMICOLON , {EOF DISPLAY IF IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {EOF DISPLAY IF IDENTIFIER }]
  [Program ::= (*) Statement , {EOF DISPLAY IF IDENTIFIER }]
}
transition on AssignStatement to state [9]
transition on IDENTIFIER to state [8]
transition on Statement to state [7]
transition on IF to state [6]
transition on Identifier to state [5]
transition on DisplayStatement to state [4]
transition on DISPLAY to state [3]
transition on IfStmt to state [2]
transition on Program to state [1]

-------------------
lalr_state [1]: {
  [Identifier ::= (*) IDENTIFIER , {BECOMES }]
  [Program ::= Program (*) Statement , {EOF DISPLAY IF IDENTIFIER }]
  [Statement ::= (*) IfStmt , {EOF DISPLAY IF IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {EOF DISPLAY IF IDENTIFIER }]
  [$START ::= Program (*) EOF , {EOF }]
  [Statement ::= (*) DisplayStatement , {EOF DISPLAY IF IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {EOF DISPLAY IF IDENTIFIER }]
  [IfStmt ::= (*) IF LPAREN Expression RPAREN Statement SEMICOLON , {EOF DISPLAY IF IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {EOF DISPLAY IF IDENTIFIER }]
}
transition on AssignStatement to state [9]
transition on IDENTIFIER to state [8]
transition on Statement to state [31]
transition on IF to state [6]
transition on EOF to state [30]
transition on Identifier to state [5]
transition on DisplayStatement to state [4]
transition on DISPLAY to state [3]
transition on IfStmt to state [2]

-------------------
lalr_state [2]: {
  [Statement ::= IfStmt (*) , {EOF DISPLAY IF SEMICOLON IDENTIFIER }]
}

-------------------
lalr_state [3]: {
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI SEMICOLON }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI SEMICOLON }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI SEMICOLON }]
  [DisplayStatement ::= DISPLAY (*) Expression SEMICOLON , {EOF DISPLAY IF SEMICOLON IDENTIFIER }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI SEMICOLON }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI SEMICOLON }]
}
transition on LPAREN to state [13]
transition on IDENTIFIER to state [12]
transition on Expression to state [28]

-------------------
lalr_state [4]: {
  [Statement ::= DisplayStatement (*) , {EOF DISPLAY IF SEMICOLON IDENTIFIER }]
}

-------------------
lalr_state [5]: {
  [AssignStatement ::= Identifier (*) BECOMES Expression SEMICOLON , {EOF DISPLAY IF SEMICOLON IDENTIFIER }]
}
transition on BECOMES to state [25]

-------------------
lalr_state [6]: {
  [IfStmt ::= IF (*) LPAREN Expression RPAREN Statement SEMICOLON , {EOF DISPLAY IF SEMICOLON IDENTIFIER }]
}
transition on LPAREN to state [10]

-------------------
lalr_state [7]: {
  [Program ::= Statement (*) , {EOF DISPLAY IF IDENTIFIER }]
}

-------------------
lalr_state [8]: {
  [Identifier ::= IDENTIFIER (*) , {BECOMES }]
}

-------------------
lalr_state [9]: {
  [Statement ::= AssignStatement (*) , {EOF DISPLAY IF SEMICOLON IDENTIFIER }]
}

-------------------
lalr_state [10]: {
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI RPAREN }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI RPAREN }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI RPAREN }]
  [IfStmt ::= IF LPAREN (*) Expression RPAREN Statement SEMICOLON , {EOF DISPLAY IF SEMICOLON IDENTIFIER }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI RPAREN }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI RPAREN }]
}
transition on LPAREN to state [13]
transition on IDENTIFIER to state [12]
transition on Expression to state [11]

-------------------
lalr_state [11]: {
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI RPAREN }]
  [IfStmt ::= IF LPAREN Expression (*) RPAREN Statement SEMICOLON , {EOF DISPLAY IF SEMICOLON IDENTIFIER }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI RPAREN }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI RPAREN }]
}
transition on MULTI to state [18]
transition on MINUS to state [17]
transition on PLUS to state [16]
transition on RPAREN to state [22]

-------------------
lalr_state [12]: {
  [Expression ::= IDENTIFIER (*) , {PLUS MINUS MULTI RPAREN SEMICOLON }]
}

-------------------
lalr_state [13]: {
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI RPAREN }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI RPAREN }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI RPAREN }]
  [Expression ::= LPAREN (*) Expression RPAREN , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI RPAREN }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI RPAREN }]
}
transition on LPAREN to state [13]
transition on IDENTIFIER to state [12]
transition on Expression to state [14]

-------------------
lalr_state [14]: {
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI RPAREN }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI RPAREN }]
  [Expression ::= LPAREN Expression (*) RPAREN , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI RPAREN }]
}
transition on MULTI to state [18]
transition on MINUS to state [17]
transition on PLUS to state [16]
transition on RPAREN to state [15]

-------------------
lalr_state [15]: {
  [Expression ::= LPAREN Expression RPAREN (*) , {PLUS MINUS MULTI RPAREN SEMICOLON }]
}

-------------------
lalr_state [16]: {
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= Expression PLUS (*) Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
}
transition on LPAREN to state [13]
transition on IDENTIFIER to state [12]
transition on Expression to state [21]

-------------------
lalr_state [17]: {
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= Expression MINUS (*) Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
}
transition on LPAREN to state [13]
transition on IDENTIFIER to state [12]
transition on Expression to state [20]

-------------------
lalr_state [18]: {
  [Expression ::= Expression MULTI (*) Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
}
transition on LPAREN to state [13]
transition on IDENTIFIER to state [12]
transition on Expression to state [19]

-------------------
lalr_state [19]: {
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= Expression MULTI Expression (*) , {PLUS MINUS MULTI RPAREN SEMICOLON }]
}
transition on MULTI to state [18]
transition on MINUS to state [17]
transition on PLUS to state [16]

-------------------
lalr_state [20]: {
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= Expression MINUS Expression (*) , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
}
transition on MULTI to state [18]
transition on MINUS to state [17]
transition on PLUS to state [16]

-------------------
lalr_state [21]: {
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= Expression PLUS Expression (*) , {PLUS MINUS MULTI RPAREN SEMICOLON }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI RPAREN SEMICOLON }]
}
transition on MULTI to state [18]
transition on MINUS to state [17]
transition on PLUS to state [16]

-------------------
lalr_state [22]: {
  [Identifier ::= (*) IDENTIFIER , {BECOMES }]
  [Statement ::= (*) IfStmt , {SEMICOLON }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {SEMICOLON }]
  [IfStmt ::= IF LPAREN Expression RPAREN (*) Statement SEMICOLON , {EOF DISPLAY IF SEMICOLON IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {SEMICOLON }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {SEMICOLON }]
  [IfStmt ::= (*) IF LPAREN Expression RPAREN Statement SEMICOLON , {SEMICOLON }]
  [Statement ::= (*) AssignStatement , {SEMICOLON }]
}
transition on Identifier to state [5]
transition on IF to state [6]
transition on IDENTIFIER to state [8]
transition on IfStmt to state [2]
transition on DISPLAY to state [3]
transition on Statement to state [23]
transition on DisplayStatement to state [4]
transition on AssignStatement to state [9]

-------------------
lalr_state [23]: {
  [IfStmt ::= IF LPAREN Expression RPAREN Statement (*) SEMICOLON , {EOF DISPLAY IF SEMICOLON IDENTIFIER }]
}
transition on SEMICOLON to state [24]

-------------------
lalr_state [24]: {
  [IfStmt ::= IF LPAREN Expression RPAREN Statement SEMICOLON (*) , {EOF DISPLAY IF SEMICOLON IDENTIFIER }]
}

-------------------
lalr_state [25]: {
  [Expression ::= (*) Expression MULTI Expression , {PLUS MINUS MULTI SEMICOLON }]
  [AssignStatement ::= Identifier BECOMES (*) Expression SEMICOLON , {EOF DISPLAY IF SEMICOLON IDENTIFIER }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS MULTI SEMICOLON }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS MULTI SEMICOLON }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS MULTI SEMICOLON }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS MULTI SEMICOLON }]
}
transition on LPAREN to state [13]
transition on IDENTIFIER to state [12]
transition on Expression to state [26]

-------------------
lalr_state [26]: {
  [AssignStatement ::= Identifier BECOMES Expression (*) SEMICOLON , {EOF DISPLAY IF SEMICOLON IDENTIFIER }]
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI SEMICOLON }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI SEMICOLON }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI SEMICOLON }]
}
transition on MULTI to state [18]
transition on MINUS to state [17]
transition on PLUS to state [16]
transition on SEMICOLON to state [27]

-------------------
lalr_state [27]: {
  [AssignStatement ::= Identifier BECOMES Expression SEMICOLON (*) , {EOF DISPLAY IF SEMICOLON IDENTIFIER }]
}

-------------------
lalr_state [28]: {
  [Expression ::= Expression (*) MULTI Expression , {PLUS MINUS MULTI SEMICOLON }]
  [DisplayStatement ::= DISPLAY Expression (*) SEMICOLON , {EOF DISPLAY IF SEMICOLON IDENTIFIER }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS MULTI SEMICOLON }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS MULTI SEMICOLON }]
}
transition on MULTI to state [18]
transition on MINUS to state [17]
transition on PLUS to state [16]
transition on SEMICOLON to state [29]

-------------------
lalr_state [29]: {
  [DisplayStatement ::= DISPLAY Expression SEMICOLON (*) , {EOF DISPLAY IF SEMICOLON IDENTIFIER }]
}

-------------------
lalr_state [30]: {
  [$START ::= Program EOF (*) , {EOF }]
}

-------------------
lalr_state [31]: {
  [Program ::= Program Statement (*) , {EOF DISPLAY IF IDENTIFIER }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 2:SHIFT(to state 3)] [term 16:SHIFT(to state 6)]
 [term 38:SHIFT(to state 8)]
From state #1
 [term 0:SHIFT(to state 30)] [term 2:SHIFT(to state 3)]
 [term 16:SHIFT(to state 6)] [term 38:SHIFT(to state 8)]
From state #2
 [term 0:REDUCE(with prod 5)] [term 2:REDUCE(with prod 5)]
 [term 16:REDUCE(with prod 5)] [term 32:REDUCE(with prod 5)]
 [term 38:REDUCE(with prod 5)]
From state #3
 [term 30:SHIFT(to state 13)] [term 38:SHIFT(to state 12)]
From state #4
 [term 0:REDUCE(with prod 4)] [term 2:REDUCE(with prod 4)]
 [term 16:REDUCE(with prod 4)] [term 32:REDUCE(with prod 4)]
 [term 38:REDUCE(with prod 4)]
From state #5
 [term 27:SHIFT(to state 25)]
From state #6
 [term 30:SHIFT(to state 10)]
From state #7
 [term 0:REDUCE(with prod 0)] [term 2:REDUCE(with prod 0)]
 [term 16:REDUCE(with prod 0)] [term 38:REDUCE(with prod 0)]
From state #8
 [term 27:REDUCE(with prod 8)]
From state #9
 [term 0:REDUCE(with prod 3)] [term 2:REDUCE(with prod 3)]
 [term 16:REDUCE(with prod 3)] [term 32:REDUCE(with prod 3)]
 [term 38:REDUCE(with prod 3)]
From state #10
 [term 30:SHIFT(to state 13)] [term 38:SHIFT(to state 12)]
From state #11
 [term 26:SHIFT(to state 16)] [term 28:SHIFT(to state 17)]
 [term 29:SHIFT(to state 18)] [term 31:SHIFT(to state 22)]
From state #12
 [term 26:REDUCE(with prod 10)] [term 28:REDUCE(with prod 10)]
 [term 29:REDUCE(with prod 10)] [term 31:REDUCE(with prod 10)]
 [term 32:REDUCE(with prod 10)]
From state #13
 [term 30:SHIFT(to state 13)] [term 38:SHIFT(to state 12)]
From state #14
 [term 26:SHIFT(to state 16)] [term 28:SHIFT(to state 17)]
 [term 29:SHIFT(to state 18)] [term 31:SHIFT(to state 15)]
From state #15
 [term 26:REDUCE(with prod 14)] [term 28:REDUCE(with prod 14)]
 [term 29:REDUCE(with prod 14)] [term 31:REDUCE(with prod 14)]
 [term 32:REDUCE(with prod 14)]
From state #16
 [term 30:SHIFT(to state 13)] [term 38:SHIFT(to state 12)]
From state #17
 [term 30:SHIFT(to state 13)] [term 38:SHIFT(to state 12)]
From state #18
 [term 30:SHIFT(to state 13)] [term 38:SHIFT(to state 12)]
From state #19
 [term 26:REDUCE(with prod 13)] [term 28:REDUCE(with prod 13)]
 [term 29:REDUCE(with prod 13)] [term 31:REDUCE(with prod 13)]
 [term 32:REDUCE(with prod 13)]
From state #20
 [term 26:REDUCE(with prod 12)] [term 28:REDUCE(with prod 12)]
 [term 29:SHIFT(to state 18)] [term 31:REDUCE(with prod 12)]
 [term 32:REDUCE(with prod 12)]
From state #21
 [term 26:REDUCE(with prod 11)] [term 28:SHIFT(to state 17)]
 [term 29:SHIFT(to state 18)] [term 31:REDUCE(with prod 11)]
 [term 32:REDUCE(with prod 11)]
From state #22
 [term 2:SHIFT(to state 3)] [term 16:SHIFT(to state 6)]
 [term 38:SHIFT(to state 8)]
From state #23
 [term 32:SHIFT(to state 24)]
From state #24
 [term 0:REDUCE(with prod 6)] [term 2:REDUCE(with prod 6)]
 [term 16:REDUCE(with prod 6)] [term 32:REDUCE(with prod 6)]
 [term 38:REDUCE(with prod 6)]
From state #25
 [term 30:SHIFT(to state 13)] [term 38:SHIFT(to state 12)]
From state #26
 [term 26:SHIFT(to state 16)] [term 28:SHIFT(to state 17)]
 [term 29:SHIFT(to state 18)] [term 32:SHIFT(to state 27)]
From state #27
 [term 0:REDUCE(with prod 7)] [term 2:REDUCE(with prod 7)]
 [term 16:REDUCE(with prod 7)] [term 32:REDUCE(with prod 7)]
 [term 38:REDUCE(with prod 7)]
From state #28
 [term 26:SHIFT(to state 16)] [term 28:SHIFT(to state 17)]
 [term 29:SHIFT(to state 18)] [term 32:SHIFT(to state 29)]
From state #29
 [term 0:REDUCE(with prod 9)] [term 2:REDUCE(with prod 9)]
 [term 16:REDUCE(with prod 9)] [term 32:REDUCE(with prod 9)]
 [term 38:REDUCE(with prod 9)]
From state #30
 [term 0:REDUCE(with prod 1)]
From state #31
 [term 0:REDUCE(with prod 2)] [term 2:REDUCE(with prod 2)]
 [term 16:REDUCE(with prod 2)] [term 38:REDUCE(with prod 2)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 1] [non term 1->state 7] [non term 2->state 9]
 [non term 3->state 4] [non term 5->state 5] [non term 6->state 2]
From state #1
 [non term 1->state 31] [non term 2->state 9] [non term 3->state 4]
 [non term 5->state 5] [non term 6->state 2]
From state #2
From state #3
 [non term 4->state 28]
From state #4
From state #5
From state #6
From state #7
From state #8
From state #9
From state #10
 [non term 4->state 11]
From state #11
From state #12
From state #13
 [non term 4->state 14]
From state #14
From state #15
From state #16
 [non term 4->state 21]
From state #17
 [non term 4->state 20]
From state #18
 [non term 4->state 19]
From state #19
From state #20
From state #21
From state #22
 [non term 1->state 23] [non term 2->state 9] [non term 3->state 4]
 [non term 5->state 5] [non term 6->state 2]
From state #23
From state #24
From state #25
 [non term 4->state 26]
From state #26
From state #27
From state #28
From state #29
From state #30
From state #31
-----------------------------
------- CUP v0.11b 20160615 (GIT 4ac7450) Parser Generation Summary -------
  0 errors and 29 warnings
  40 terminals, 7 non-terminals, and 15 productions declared, 
  producing 32 unique parse states.
  28 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (CUP v0.11b 20160615 (GIT 4ac7450))
